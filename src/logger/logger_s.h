#ifndef LOGGER_LOGGER_S_H_
#define LOGGER_LOGGER_S_H_

#include <stdlib.h>
#include <syslog.h>

typedef int LOG_FACILITY;
#define LOG_FACILITY_NONE			(-1)
#define LOG_FACILITY_KERN	 		LOG_KERN
#define LOG_FACILITY_DAEMON 		LOG_DAEMON
#define LOG_FACILITY_USER			LOG_USER
#define LOG_FACILITY_LOCAL0 		LOG_LOCAL0
#define LOG_FACILITY_LOCAL1 		LOG_LOCAL1
#define LOG_FACILITY_LOCAL2 		LOG_LOCAL2
#define LOG_FACILITY_LOCAL3 		LOG_LOCAL3
#define LOG_FACILITY_LOCAL4 		LOG_LOCAL4
#define LOG_FACILITY_LOCAL5 		LOG_LOCAL5
#define LOG_FACILITY_LOCAL6			LOG_LOCAL6
#define LOG_FACILITY_LOCAL7 		LOG_LOCAL7
#define LOG_FACILITY_KERN_NAME		"kern"
#define LOG_FACILITY_DAEMON_NAME	"daemon"
#define LOG_FACILITY_USER_NAME		"user"
#define LOG_FACILITY_LOCAL0_NAME	"local0"
#define LOG_FACILITY_LOCAL1_NAME	"local1"
#define LOG_FACILITY_LOCAL2_NAME	"local2"
#define LOG_FACILITY_LOCAL3_NAME	"local3"
#define LOG_FACILITY_LOCAL4_NAME	"local4"
#define LOG_FACILITY_LOCAL5_NAME	"local5"
#define LOG_FACILITY_LOCAL6_NAME	"local6"
#define LOG_FACILITY_LOCAL7_NAME	"local7"
#define LOG_FACILITY_TO_STRING(value) \
(\
	(value == LOG_FACILITY_KERN)   ? LOG_FACILITY_KERN_NAME :\
	(value == LOG_FACILITY_DAEMON) ? LOG_FACILITY_DAEMON_NAME :\
	(value == LOG_FACILITY_USER)   ? LOG_FACILITY_USER_NAME :\
	(value == LOG_FACILITY_LOCAL0) ? LOG_FACILITY_LOCAL0_NAME :\
	(value == LOG_FACILITY_LOCAL1) ? LOG_FACILITY_LOCAL1_NAME :\
	(value == LOG_FACILITY_LOCAL2) ? LOG_FACILITY_LOCAL2_NAME :\
	(value == LOG_FACILITY_LOCAL3) ? LOG_FACILITY_LOCAL3_NAME :\
	(value == LOG_FACILITY_LOCAL4) ? LOG_FACILITY_LOCAL4_NAME :\
	(value == LOG_FACILITY_LOCAL5) ? LOG_FACILITY_LOCAL5_NAME :\
	(value == LOG_FACILITY_LOCAL6) ? LOG_FACILITY_LOCAL6_NAME :\
	(value == LOG_FACILITY_LOCAL7) ? LOG_FACILITY_LOCAL7_NAME :\
	"*"\
)

typedef int LOG_LEVEL;
#define	LOG_LEVEL_NONE				(-1)
#define	LOG_LEVEL_EMERGENCY			LOG_EMERG
#define	LOG_LEVEL_ALERT				LOG_ALERT
#define	LOG_LEVEL_CRITICAL			LOG_CRIT
#define	LOG_LEVEL_ERROR				LOG_ERR
#define	LOG_LEVEL_WARNING			LOG_WARNING
#define	LOG_LEVEL_NOTICE			LOG_NOTICE
#define	LOG_LEVEL_INFO				LOG_INFO
#define	LOG_LEVEL_DEBUG				LOG_DEBUG
#define	LOG_LEVEL_EMERGENCY_NAME	"emergency"
#define	LOG_LEVEL_ALERT_NAME		"alert"
#define	LOG_LEVEL_CRITICAL_NAME		"critical"
#define	LOG_LEVEL_ERROR_NAME		"error"
#define	LOG_LEVEL_WARNING_NAME		"warning"
#define	LOG_LEVEL_NOTICE_NAME		"notice"
#define	LOG_LEVEL_INFO_NAME			"info"
#define	LOG_LEVEL_DEBUG_NAME		"debug"
#define LOG_LEVEL_TO_STRING(value) \
(\
	value == LOG_LEVEL_EMERGENCY ? LOG_LEVEL_EMERGENCY_NAME :\
	value == LOG_LEVEL_ALERT ? LOG_LEVEL_ALERT_NAME :\
	value == LOG_LEVEL_CRITICAL ? LOG_LEVEL_CRITICAL_NAME :\
	value == LOG_LEVEL_ERROR ? LOG_LEVEL_ERROR_NAME :\
	value == LOG_LEVEL_WARNING ? LOG_LEVEL_WARNING_NAME :\
	value == LOG_LEVEL_NOTICE ? LOG_LEVEL_NOTICE_NAME :\
	value == LOG_LEVEL_INFO ? LOG_LEVEL_INFO_NAME :\
	value == LOG_LEVEL_DEBUG ? LOG_LEVEL_DEBUG_NAME :\
	"unknown"\
)

#define HPVT_logging(priority, format, ...) \
if (priority <= global_log_level) {\
	syslog(priority, "[%s%05d][%s]" format, FILE_NUMBER, __LINE__, LOG_LEVEL_TO_STRING(priority),  ##__VA_ARGS__);\
}

#define HPVT_log_UNEXPECTED_ERROR() \
		HPVT_logging(LOG_LEVEL_EMERGENCY, "Unexpected error has occurred");abort();


#endif /* LOGGER_LOGGER_S_H_ */
